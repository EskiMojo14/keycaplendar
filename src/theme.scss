@use "@material/button/_index" as button;
@use "@material/card/_index" as card;
@use "@material/checkbox/_index" as checkbox;
@use "@material/chips/_index" as chips;
@use "@material/dialog/_index" as dialog;
@use "@material/drawer/_index" as drawer;
@use "@material/fab/_index" as fab;
@use "@material/list/_index" as list;
@use "@material/radio/_index" as radio;
@use "@material/ripple/_index" as ripple;
@use "@material/snackbar/_index" as snackbar;
@use "@material/select/_index" as select;
@use "@material/switch/_index" as switch;
@use "@material/top-app-bar/_index" as top-app-bar;
@use "@material/textfield/_index" as text-field;
@use "@material/textfield/icon/_index" as text-field-icon;
@use "@material/textfield/helper-text/_index" as text-field-helper-text;
@use "@material/tab/_index" as tab;
@use "@material/tab-indicator/_index" as tab-indicator;
@use "@material/theme/color-palette" as palette;

$overlay-values: (
  0: 0%,
  1: 5%,   // card, switch
  2: 7%,   // contained button
  3: 8%,   // refresh indicator
  4: 9%,   // app bar
  6: 11%,  // FAB, snackbar
  8: 12%,  // menu, side sheet
  12: 14%,
  16: 15%, // nav drawer, modal side sheet
  24: 16%, // dialog
);

@function overlay-elevation($color, $elevation: 0) {
  @return lighten($color, map-get($overlay-values, $elevation));
}

@mixin theme($theme, $dark: false) {
  $text-colors: (
    text-primary: rgba(map-get($theme, on-surface), 0.87),
    text-secondary: rgba(map-get($theme, on-surface), 0.6),
    text-disabled: rgba(map-get($theme, on-surface), 0.38),
  );
  $variables: map-merge($theme, $text-colors);
  --meta-color: #{if(
      $dark,
      darken(overlay-elevation(map-get($variables, surface), 4), 10%),
      darken(map-get($variables, primary), 10%)
    )};
  --divider-color: #{rgba(map-get($variables, on-surface), 0.12)};
  --lighter-color: #{rgba(map-get($variables, on-surface), 0.06)};
  $graph-colors: (
    palette.$red-500,
    palette.$deep-orange-500,
    palette.$orange-500,
    palette.$amber-500,
    palette.$yellow-500,
    palette.$lime-500,
    palette.$light-green-500,
    palette.$green-500,
    palette.$teal-500,
    palette.$cyan-500,
    palette.$light-blue-500,
    palette.$blue-500,
    palette.$indigo-500,
    palette.$deep-purple-500,
    palette.$purple-500,
    palette.$pink-500,
    palette.$blue-grey-500,
    palette.$grey-500,
    palette.$brown-500
  );
  $graph-colors-dark: (
    palette.$red-300,
    palette.$deep-orange-300,
    palette.$orange-300,
    palette.$amber-300,
    palette.$yellow-300,
    palette.$lime-300,
    palette.$light-green-300,
    palette.$green-300,
    palette.$teal-300,
    palette.$cyan-300,
    palette.$light-blue-300,
    palette.$blue-300,
    palette.$indigo-300,
    palette.$deep-purple-300,
    palette.$purple-300,
    palette.$pink-300,
    palette.$blue-grey-300,
    palette.$grey-300,
    palette.$brown-300
  );
  $letters: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  body {
    background-color: map-get($variables, background);
  }
  ::selection {
    background: rgba(map-get($variables, secondary), 0.45);
    color: inherit;
  }
  .mdc-button {
    @include button.ink-color(map-get($variables, primary));
    @include ripple.states(map-get($variables, primary));
    &:disabled {
      color: map-get($variables, text-disabled);
    }
    &.mdc-button--raised {
      @include button.container-fill-color(map-get($variables, primary));
      @include button.ink-color(map-get($variables, on-primary));
      @include ripple.states(map-get($variables, on-primary));
    }
    &.delete {
      @include button.ink-color(map-get($variables, error));
      @include ripple.states(map-get($variables, error));
    }
  }

  .mdc-card {
    background-color: if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface));
    &.mdc-card--selected {
      .mdc-typography--headline5 {
        color: map-get($variables, primary);
      }
      .live-indicator,
      .ship-indicator {
        fill: map-get($variables, primary);
      }
      .overline,
      .mdc-typography--subtitle2 {
        color: map-get($variables, primary);
      }
    }
    &__primary-action {
      @include ripple.states(map-get($variables, on-surface));
      @include ripple.states-selected(map-get($variables, primary));
      @include ripple.states-activated(map-get($variables, primary));
    }
    &__action--icon {
      &:not(:disabled) {
        color: map-get($variables, text-secondary);
      }
      &:disabled {
        color: map-get($variables, text-disabled);
      }
    }
    .mdc-typography--headline5 {
      color: map-get($variables, text-primary);
    }
    .live-indicator,
    .ship-indicator {
      fill: map-get($variables, text-secondary);
    }
    .overline,
    .mdc-typography--subtitle2,
    .mdc-typography--caption {
      color: map-get($variables, text-secondary);
    }
  }
  @if ($dark) {
    transition-property: box-shadow, background-color;
    .card-container .mdc-card:hover {
      background-color: overlay-elevation(map-get($variables, surface), 4);
    }
  }

  .mdc-checkbox {
    @include checkbox.container-colors(
      map-get($variables, text-secondary),
      transparent,
      map-get($variables, secondary),
      map-get($variables, secondary)
    );
    @include ripple.states(map-get($variables, on-surface));
    &.mdc-checkbox--selected {
      @include ripple.states(map-get($variables, secondary));
    }
    .mdc-checkbox__native-control[disabled] ~ .mdc-checkbox__background {
      border-color: rgba(map-get($variables, on-surface), 0.26);
      background-color: transparent;
      .mdc-checkbox__checkmark {
        color: black;
      }
    }
    .mdc-checkbox__native-control[disabled]:checked ~ .mdc-checkbox__background,
    .mdc-checkbox__native-control[disabled]:indeterminate ~ .mdc-checkbox__background {
      border-color: transparent;
      background-color: rgba(map-get($variables, on-surface), 0.26);
      .mdc-checkbox__checkmark {
        color: black;
      }
    }
    .mdc-checkbox__checkmark {
      color: map-get($variables, on-secondary);
    }
    .mdc-checkbox__mixedmark {
      border-color: map-get($variables, on-secondary);
    }
  }

  .mdc-dialog {
    @include dialog.container-fill-color(
      if($dark, overlay-elevation(map-get($variables, surface), 24), map-get($variables, surface))
    );
    @include dialog.scrim-color(map-get($variables, on-surface), 0.32);
    @include dialog.title-ink-color(map-get($variables, text-primary));
    @include dialog.content-ink-color(map-get($variables, text-secondary));
    .primary {
      color: map-get($variables, text-primary);
    }
  }

  .mdc-drawer {
    @include drawer.fill-color-accessible(
      if($dark, overlay-elevation(map-get($variables, surface), 16), map-get($variables, surface))
    );
    @include drawer.item-activated-icon-ink-color(map-get($variables, primary));
    @include drawer.item-activated-text-ink-color(map-get($variables, primary));
    @include drawer.scrim-fill-color(rgba(map-get($variables, on-surface), 0.32));
    &.mdc-drawer--dismissible {
      @include drawer.surface-fill-color(
        if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface))
      );
      .mdc-chip {
        @include chips.fill-color-accessible(
          mix(
            map-get($variables, on-surface),
            if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface)),
            12%
          )
        );
        @include chips.selected-ink-color(map-get($variables, primary));
      }
      &.nav.mdc-drawer--open,
      &.nav.mdc-drawer--opening {
        .mdc-list-item {
          color: map-get($variables, text-primary);
          &.mdc-list-item--activated {
            color: map-get($variables, primary);
          }
        }
      }
      &.nav.mdc-drawer--animate:not(.mdc-drawer--opening),
      &.nav.mdc-drawer--closing {
        .mdc-list-item,
        .mdc-list-item.mdc-list-item--activated {
          color: transparent;
        }
      }
    }
    .mdc-chip {
      @include chips.fill-color-accessible(
        mix(
          map-get($variables, on-surface),
          if($dark, overlay-elevation(map-get($variables, surface), 16), map-get($variables, surface)),
          12%
        )
      );
      @include chips.selected-ink-color(map-get($variables, primary));
    }
    .mdc-icon-button {
      color: map-get($variables, text-secondary);
      @include ripple.states(map-get($variables, on-surface));
    }
    .mdc-card {
      @include card.fill-color(transparent);
      .vendor-title,
      .date-title {
        color: map-get($variables, text-secondary);
      }
    }

    .mdc-menu {
      background-color: if($dark, overlay-elevation(map-get($variables, surface), 24), map-get($variables, surface));
    }

    &__content {
      .mdc-list-item {
        &__secondary-text {
          color: map-get($variables, text-secondary);
        }
        &__meta {
          color: map-get($variables, text-disabled);
        }
      }
      .mdc-typography--overline {
        color: map-get($variables, text-secondary);
      }
      .mdc-typography--headline4,
      .mdc-typography--body2,
      .mdc-form-field {
        color: map-get($variables, text-primary);
      }
    }
  }

  .mdc-fab {
    @include fab.container-color(map-get($variables, secondary));
    @include fab.ink-color(map-get($variables, on-secondary));
    @include ripple.states(map-get($variables, on-secondary));
  }

  .mdc-form-field {
    color: map-get($variables, text-primary);
  }

  .mdc-image-list {
    .mdc-image-list__item {
      .container::before {
        background-color: map-get($variables, primary);
      }
      &.selected {
        @include ripple.states(map-get($variables, primary));
        .mdc-image-list__supporting {
          background-color: rgba(map-get($variables, on-primary), 0.75);
          .primary-text,
          .secondary-text,
          .overline {
            color: map-get($variables, primary);
          }
          .live-indicator,
          .ship-indicator {
            fill: map-get($variables, primary);
          }
        }
      }
    }
  }
  :not(.mdc-list--non-interactive)
    > :not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-list-item--selected):not(.mdc-list-item--activated) {
    @include ripple.states(map-get($variables, on-surface));
  }
  .mdc-list .mdc-list-item,
  .mdc-list-item {
    @include list.item-primary-text-ink-color(map-get($variables, text-primary));
    @include list.item-secondary-text-ink-color(map-get($variables, text-secondary));
    @include list.item-graphic-ink-color(map-get($variables, text-secondary));
    @include list.item-meta-ink-color(map-get($variables, text-secondary));
    @include ripple.states(map-get($variables, on-surface));
    @include ripple.states-activated(map-get($variables, primary));
    @include ripple.states-selected(map-get($variables, primary));
    &.mdc-list-item--activated,
    &.mdc-list-item--selected {
      @include list.item-primary-text-ink-color(map-get($variables, primary));
      @include list.item-secondary-text-ink-color(map-get($variables, primary));
      @include list.item-graphic-ink-color(map-get($variables, primary));
      .overline {
        color: map-get($variables, primary);
      }
      .mdc-list-item__graphic,
      .mdc-list-item__meta {
        fill: map-get($variables, primary);
      }
      .mdc-icon-button {
        color: map-get($variables, primary);
        fill: map-get($variables, primary);
        @include ripple.states(map-get($variables, primary));
      }
    }
    .mdc-list-item__graphic,
    .mdc-list-item__meta {
      fill: map-get($variables, text-secondary);
    }
    .mdc-icon-button {
      color: map-get($variables, text-secondary);
      fill: map-get($variables, text-secondary);
      @include ripple.states(map-get($variables, on-surface));
    }
    .time-indicator {
      background-color: mix(map-get($variables, on-surface), map-get($variables, surface), 80%);
      color: map-get($variables, surface);
    }
    .overline {
      color: map-get($variables, text-secondary);
    }
  }

  .mdc-menu {
    background-color: if($dark, overlay-elevation(map-get($variables, surface), 8), map-get($variables, surface));
  }

  @media (max-width: 840px) {
    .mdc-menu.mdc-select__menu.mdc-menu-surface.mdc-menu-surface--fixed {
      background-color: if($dark, overlay-elevation(map-get($variables, surface), 24), map-get($variables, surface));
    }
  }

  .mdc-radio {
    @include radio.unchecked-stroke-color(map-get($variables, text-secondary));
    @include radio.checked-stroke-color(map-get($variables, secondary));
    @include radio.ink-color(map-get($variables, secondary));
    @include ripple.states(map-get($variables, secondary));
  }

  .mdc-select {
    @include select.ink-color(map-get($variables, text-primary));
    @include select.label-color(map-get($variables, text-secondary));
    @include select.focused-label-color(rgba(map-get($variables, primary), 0.87));
    @include select.outline-color(rgba(map-get($variables, on-surface), 0.38));
    @include select.hover-outline-color(map-get($variables, text-primary));
    @include select.focused-outline-color(map-get($variables, primary));
    //@include select.dropdown-icon-color(rgba(map-get($variables, on-surface),0.6));
    &.mdc-select--focused {
      //@include select.dropdown-icon-color(map-get($variables, primary));
    }
  }

  .mdc-snackbar {
    @include snackbar.fill-color(mix(map-get($variables, on-surface), map-get($variables, surface), 80%));
    @include snackbar.label-ink-color(map-get($variables, surface));
    &__action:not(:disabled) {
      color: if($dark, darken(map-get($variables, primary), 25%), map-get($variables, primary));
      @include ripple.states(if($dark, darken(map-get($variables, primary), 25%), map-get($variables, primary)));
    }
  }

  .mdc-switch {
    @include switch.toggled-off-track-color(map-get($variables, on-surface));
    @include switch.toggled-off-thumb-color(if($dark, #bdbdbd, #fafafa));
    @include switch.toggled-on-color(map-get($variables, secondary));
  }

  .mdc-text-field {
    &:not(.mdc-text-field--focused) {
      @include text-field-icon.leading-icon-color(map-get($variables, text-secondary));
      @include text-field-icon.trailing-icon-color(map-get($variables, text-secondary));
      @include text-field.ink-color(map-get($variables, text-primary));
      @include text-field.label-color(map-get($variables, text-secondary));
      @include text-field.caret-color(map-get($variables, text-primary));
      @include text-field.outline-color(map-get($variables, text-disabled));
      @include text-field.hover-outline-color(map-get($variables, text-secondary));
      @include text-field-helper-text.helper-text-color(map-get($variables, text-secondary));
      .mdc-text-field__icon {
        fill: map-get($variables, text-secondary);
      }
      &.mdc-text-field--invalid {
        @include text-field-icon.leading-icon-color(map-get($variables, text-secondary));
        @include text-field-icon.trailing-icon-color(map-get($variables, text-secondary));
        @include text-field.ink-color(map-get($variables, text-primary));
        @include text-field.label-color(map-get($variables, error));
        @include text-field.caret-color(map-get($variables, error));
        @include text-field.outline-color(map-get($variables, error));
        @include text-field.hover-outline-color(
          if($dark, lighten(map-get($variables, error), 12%), darken(map-get($variables, error), 25%))
        );
        @include text-field-helper-text.helper-text-color(map-get($variables, error));
        .mdc-text-field__icon {
          fill: map-get($variables, text-secondary);
        }
        .mdc-text-field__input:required ~ .mdc-notched-outline .mdc-floating-label::after {
          color: map-get($variables, error);
        }
      }
    }
    &.mdc-text-field--focused {
      @include text-field-icon.leading-icon-color(map-get($variables, text-secondary));
      @include text-field-icon.trailing-icon-color(map-get($variables, text-secondary));
      @include text-field.ink-color(map-get($variables, text-primary));
      @include text-field.label-color(map-get($variables, primary));
      @include text-field.caret-color(map-get($variables, primary));
      @include text-field.outline-color(map-get($variables, primary));
      @include text-field-helper-text.helper-text-color(map-get($variables, text-secondary));
      .mdc-text-field__icon {
        fill: map-get($variables, text-secondary);
      }
      .mdc-text-field__input:required ~ .mdc-notched-outline .mdc-floating-label::after {
        color: map-get($variables, primary);
      }
    }
    &.mdc-text-field--disabled {
      .mdc-text-field__input,
      .mdc-floating-label {
        color: map-get($variables, text-disabled);
      }
      .mdc-notched-outline__leading,
      .mdc-notched-outline__notch,
      .mdc-notched-outline__trailing {
        border-color: rgba(map-get($variables, on-surface), 0.06);
      }
    }
  }
  .mdc-linear-progress {
    &__bar-inner {
      background-color: map-get($variables, primary);
    }
  }
  .mdc-tab-bar {
    .mdc-tab {
      @include tab.text-label-color(map-get($variables, text-secondary));
      @include tab.icon-color(map-get($variables, text-secondary));
      @include tab.states-color(map-get($variables, on-surface));
      @include tab.active-text-label-color(map-get($variables, primary));
      @include tab.active-icon-color(map-get($variables, primary));
      @include tab.active-states-color(map-get($variables, primary));
      .mdc-tab-indicator {
        @include tab-indicator.underline-color(map-get($variables, primary))
      }
    }
  }
  .mdc-top-app-bar {
    @include top-app-bar.fill-color(
      if($dark, overlay-elevation(map-get($variables, surface), 4), map-get($variables, primary))
    );
    @include top-app-bar.ink-color(if($dark, map-get($variables, text-primary), map-get($variables, on-primary)));
    @include top-app-bar.icon-ink-color(
      if($dark, map-get($variables, text-primary), map-get($variables, on-primary))
    );
    @if ($dark != true) {
      .mdc-linear-progress__bar-inner {
        background-color: map-get($variables, secondary);
      }
      .toggle-group {
        .mdc-button {
          @include button.ink-color(rgba(map-get($variables, on-primary), 0.6));
          @include button.outline-color(rgba(map-get($variables, on-primary), 0.38));
          @include ripple.states(map-get($variables, on-primary));
          @include ripple.states-selected(map-get($variables, on-primary));
          &--selected {
            @include button.ink-color(map-get($variables, on-primary));
            @include button.outline-color(map-get($variables, on-primary));
          }
          &:disabled {
            color: map-get($variables, text-disabled);
          }
        }
      }
      .mdc-tab-bar {
        .mdc-tab {
          @include tab.text-label-color(rgba(map-get($variables, on-primary), 0.6));
          @include tab.icon-color(rgba(map-get($variables, on-primary), 0.6));
          @include tab.states-color(map-get($variables, on-primary));
          @include tab.active-text-label-color(map-get($variables, on-primary));
          @include tab.active-icon-color(map-get($variables, on-primary));
          @include tab.active-states-color(map-get($variables, on-primary));
          .mdc-tab-indicator {
            @include tab-indicator.underline-color(map-get($variables, on-primary))
          }
        }
      }
    }
    .search-bar {
      &--persistent .search-bar-field.mdc-text-field {
        background-color: rgba(map-get($variables, if($dark, on-surface, on-primary)), 0.15);
        .mdc-text-field__input {
          &::placeholder {
            color: if($dark, map-get($variables, text-secondary), rgba(map-get($variables, on-primary), 0.6));
            opacity: 1;
          }
          &::-ms-input-placeholder {
            color: if(
              $dark,
              map-get($variables, text-secondary),
              rgba(map-get($variables, on-primary), 0.6)
            ) !important;
          }
        }
        &:not(.mdc-text-field--focused) {
          @include text-field-icon.leading-icon-color(
            if($dark, map-get($variables, text-secondary), rgba(map-get($variables, on-primary), 0.6))
          );
          @include text-field-icon.trailing-icon-color(
            if($dark, map-get($variables, text-secondary), rgba(map-get($variables, on-primary), 0.6))
          );
          @include text-field.ink-color(
            if($dark, map-get($variables, text-primary), rgba(map-get($variables, on-primary), 0.87))
          );
          @include text-field.caret-color(
            if($dark, map-get($variables, on-surface), map-get($variables, on-primary))
          );
          @include text-field.outline-color(
            if($dark, map-get($variables, text-disabled), rgba(map-get($variables, on-primary), 0.38))
          );
          @include text-field.hover-outline-color(
            if($dark, map-get($variables, text-secondary), rgba(map-get($variables, on-primary), 0.6))
          );
        }
        &.mdc-text-field--focused {
          @include text-field-icon.leading-icon-color(
            if($dark, map-get($variables, text-secondary), rgba(map-get($variables, on-primary), 0.6))
          );
          @include text-field-icon.trailing-icon-color(
            if($dark, map-get($variables, text-secondary), rgba(map-get($variables, on-primary), 0.6))
          );
          @include text-field.ink-color(
            if($dark, map-get($variables, text-primary), rgba(map-get($variables, on-primary), 0.87))
          );
          @include text-field.caret-color(if($dark, map-get($variables, primary), map-get($variables, on-primary)));
          @include text-field.outline-color(
            if($dark, map-get($variables, primary), map-get($variables, on-primary))
          );
        }
      }
      &--modal {
        background-color: if($dark, overlay-elevation(map-get($variables, surface), 8), map-get($variables, surface));
        .search-bar-field.mdc-text-field {
          .mdc-text-field__input {
            &::placeholder {
              color: map-get($variables, text-secondary);
              opacity: 1;
            }
            &::-ms-input-placeholder {
              color: map-get($variables, text-secondary) !important;
            }
          }
          &:not(.mdc-text-field--focused),
          &.mdc-text-field--focused {
            @include text-field-icon.leading-icon-color(map-get($variables, text-secondary));
            @include text-field-icon.trailing-icon-color(map-get($variables, text-secondary));
            @include text-field.ink-color(map-get($variables, text-primary));
            @include text-field.caret-color(map-get($variables, on-surface));
          }
        }
      }
    }
    &.bottom-app-bar {
      .mdc-top-app-bar__section:not(.indent) {
        background-color: if($dark, overlay-elevation(map-get($variables, surface), 4), map-get($variables, primary));
      }
      .indent {
        fill: if($dark, overlay-elevation(map-get($variables, surface), 4), map-get($variables, primary));
      }
    }
    .svg-container {
      @include ripple.states(map-get($variables, if($dark, on-surface, on-primary)));
    }

    .mdc-button {
      color: map-get($variables, if($dark, text-primary, on-primary));
      @include ripple.states(map-get($variables, if($dark, on-surface, on-primary)));
      &[disabled] {
        color: rgba(map-get($variables, if($dark, text-primary, on-primary)), 0.38);
      }
    }

    .rmwc-circular-progress {
      color: if($dark, map-get($variables, primary), map-get($variables, on-primary));
    }
  }

  .rmwc-circular-progress {
    color: map-get($variables, primary);
  }

  .rmwc-data-table {
    color: map-get($variables, text-primary);
    &__cell {
      background-color: transparent;
      border-color: var(--divider-color);
      .mdc-icon-button,
      .svg-container.mdc-icon-button {
        color: map-get($variables, text-secondary);
        @include ripple.states(map-get($variables, on-surface));
        &.disabled {
          color: map-get($variables, text-disabled);
          @include ripple.states(transparent);
        }
      }
    }
    &__head-cell {
      color: map-get($variables, text-primary);
      &.sorted::before {
        color: map-get($variables, text-secondary);
      }
      &.profile-title {
        @include ripple.states(map-get($variables, on-surface));
      }
    }
    &__row:not(.rmwc-data-table__row--selected):not(.rmwc-data-table__row--activated) .rmwc-data-table__cell::before,
    &__row:hover:not(.rmwc-data-table__row--selected):not(.rmwc-data-table__row--activated)
      .rmwc-data-table__cell:not(.rmwc-data-table__head-cell)::before {
      background-color: map-get($variables, on-surface);
    }
  }

  .rmwc-avatar {
    color: map-get($variables, text-disabled);
  }

  .rmwc-tooltip {
    &-inner {
      background-color: map-get($variables, on-surface);
      color: map-get($variables, surface);
    }
    &-placement-top .rmwc-tooltip-arrow,
    &-placement-topLeft .rmwc-tooltip-arrow,
    &-placement-topRight .rmwc-tooltip-arrow {
      border-top-color: map-get($variables, on-surface);
      &-inner {
        border-top-color: map-get($variables, surface);
      }
    }
    &-placement-right .rmwc-tooltip-arrow,
    &-placement-rightTop .rmwc-tooltip-arrow,
    &-placement-rightBottom .rmwc-tooltip-arrow {
      border-right-color: map-get($variables, on-surface);
      &-inner {
        border-right-color: map-get($variables, surface);
      }
    }
    &-placement-left .rmwc-tooltip-arrow,
    &-placement-leftTop .rmwc-tooltip-arrow,
    &-placement-leftBottom .rmwc-tooltip-arrow {
      border-left-color: map-get($variables, on-surface);
      &-inner {
        border-left-color: map-get($variables, surface);
      }
    }
    &-placement-bottom .rmwc-tooltip-arrow-inner,
    &-placement-bottomLeft .rmwc-tooltip-arrow-inner,
    &-placement-bottomRight .rmwc-tooltip-arrow-inner {
      border-bottom-color: map-get($variables, on-surface);
      &-inner {
        border-bottom-color: map-get($variables, surface);
      }
    }
  }
  .ct-chart {
    .ct-label {
      fill: map-get($variables, text-secondary);
      color: map-get($variables, text-secondary);
    }
  }

  @each $letter in $letters {
    $color: if($dark, nth($graph-colors-dark, index($letters, $letter)), nth($graph-colors, index($letters, $letter)));
    .ct-series-#{$letter} {
      .ct-point,
      .ct-line,
      .ct-bar,
      .ct-slice-donut {
        stroke: $color;
      }
      .ct-slice-pie,
      .ct-donut-solid,
      .ct-area {
        fill: $color;
      }
    }
    .timeline-table.rmwc-data-table .rmwc-data-table__row .rmwc-data-table__cell.profile-title.title-#{$letter} {
      @include ripple.states($color);
      .profile-indicator {
        background-color: $color;
      }
    }
    .focused {
      &:not(.series-#{$letter}) {
        .ct-series-#{$letter} {
          .ct-point,
          .ct-line,
          .ct-bar,
          .ct-slice-donut {
            stroke: rgba($color, 0.1);
          }
          .ct-slice-pie,
          .ct-donut-solid,
          .ct-area {
            fill: rgba($color, 0.1);
          }
        }
        .timeline-table.rmwc-data-table .rmwc-data-table__row .rmwc-data-table__cell.profile-title.title-#{$letter} .profile-indicator {
          background-color: rgba($color, 0.1);
        }
        .timeline-table.rmwc-data-table .rmwc-data-table__row .rmwc-data-table__cell.cell-#{$letter} {
          color: map-get($variables, text-disabled);
        }
      }
    }
  }

  .count-graph {
    .ct-series-a {
      .ct-point,
      .ct-line,
      .ct-bar,
      .ct-slice-donut {
        stroke: map-get($variables, secondary);
      }
      .ct-slice-pie,
      .ct-donut-solid,
      .ct-area {
        fill: map-get($variables, secondary);
      }
    }
  }
  .pie-card {
    .pie-chart-container {
      &.status .ct-chart {
        .ct-series.ct-series-c {
          .ct-point,
          .ct-line,
          .ct-bar,
          .ct-slice-donut {
            stroke: map-get($variables, secondary);
          }
          .ct-slice-pie,
          .ct-donut-solid,
          .ct-area {
            fill: map-get($variables, secondary);
          }
        }
        .ct-series.ct-series-d {
          .ct-point,
          .ct-line,
          .ct-bar,
          .ct-slice-donut {
            stroke: map-get($variables, primary);
          }
          .ct-slice-pie,
          .ct-donut-solid,
          .ct-area {
            fill: map-get($variables, primary);
          }
        }
      }
      &.shipped .ct-chart {
        .ct-series.ct-series-b {
          .ct-point,
          .ct-line,
          .ct-bar,
          .ct-slice-donut {
            stroke: map-get($variables, primary);
          }
          .ct-slice-pie,
          .ct-donut-solid,
          .ct-area {
            fill: map-get($variables, primary);
          }
        }
      }
    }
    .indicator {
      &.shipped, &.post-gb {
        background-color: map-get($variables, primary);
      }
      &.live-gb {
        background-color: map-get($variables, secondary);
      }
    }
  }
  .autocomplete-mobile {
    background-color: map-get($variables, background);
  }

  .banner-text {
    color: map-get($variables, text-secondary);
  }

  .empty-container,
  .login-container {
    .title {
      color: map-get($variables, text-primary);
    }
    .subtitle {
      color: map-get($variables, text-secondary);
    }
  }

  .footer p {
    color: map-get($variables, text-secondary);
    .bold {
      color: map-get($variables, text-primary);
    }
    a, a.bold {
      color: map-get($variables, primary);
    }
  }

  .full-screen-dialog {
    background-color: if($dark, overlay-elevation(map-get($variables, surface), 16), map-get($variables, surface));
    &-scrim {
      background-color: rgba(map-get($variables, on-surface), 0.32);
    }
    .mdc-card {
      @include card.fill-color(transparent);
      .vendor-title,
      .image-title,
      .date-title {
        color: map-get($variables, text-secondary);
      }
    }
    .mdc-menu {
      background-color: if($dark, overlay-elevation(map-get($variables, surface), 24), map-get($variables, surface));
    }
  }
  .image-upload {
    &-title {
      color: map-get($variables, text-secondary);
    }
    .image-display {
      fill: map-get($variables, text-secondary);
      &::before {
        background-color: map-get($variables, on-surface);
      }
      &.over {
        border-color: map-get($variables, primary);
      }
      .caption {
        color: map-get($variables, text-secondary);
      }
    }
  }

  .list .content-grid {
    background-color: if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface));
  }

  .subheader {
    color: map-get($variables, text-secondary);
  }

  .main::before {
    background-color: if($dark, overlay-elevation(map-get($variables, surface), 4), map-get($variables, primary));
  }

  .users,
  .log,
  .legal,
  .guide {
    background-color: if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface));
    color: map-get($variables, text-primary);
    a {
      color: map-get($variables, primary);
    }
    .mdc-typography--button {
      color: map-get($variables, primary);
      &.delete {
        color: map-get($variables, error);
      }
    }
    .secondary {
      color: map-get($variables, text-secondary);
      .bold {
        color: map-get($variables, text-primary);
      }
    }
    &-container::before {
      background-color: if($dark, overlay-elevation(map-get($variables, surface), 4), map-get($variables, primary));
    }
  }

  .user {
    .mdc-card__action--icon.disabled {
      color: map-get($variables, text-disabled);
    }
    .overline {
      color: map-get($variables, text-secondary);
    }
  }

  .log {
    .mdc-icon-button {
      color: map-get($variables, text-secondary);
      @include ripple.states(map-get($variables, on-surface));
    }
    .overline {
      color: map-get($variables, text-secondary);
    }
    .before,
    .after {
      color: map-get($variables, text-disabled);
      a {
        color: rgba(map-get($variables, primary), 0.38);
      }
      .highlight {
        color: map-get($variables, text-primary);
        a {
          color: map-get($variables, primary);
        }
      }
    }
  }

  .sponsors {
    .cannonkeys {
      fill: if($dark, white, #060d44);
    }
    .prototypist {
      fill: if($dark, white, #3f6b6b);
    }
    .deskhero {
      color: map-get($variables, on-surface);
    }
  }

  .toggle-group {
    .mdc-button {
      @include button.ink-color(map-get($variables, text-secondary));
      @include ripple.states(map-get($variables, on-surface));
      @include ripple.states-selected(map-get($variables, primary));
      &--selected {
        @include button.ink-color(map-get($variables, primary));
        @include button.outline-color(map-get($variables, primary));
      }
      &:disabled {
        color: map-get($variables, text-disabled);
      }
    }
  }
}
